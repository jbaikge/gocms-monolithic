{{ define "head" }}
<style type="text/css">
.class-fields:empty::after {
  background-color: var(--bs-secondary);
  color: var(--bs-light);
  text-align: center;
  content: 'Drag fields here';
  padding: 1em 0;
}
.sortable-ghost {
  opacity: 0.5;
}
.sortable-handle {
  background-color: var(--bs-secondary);
  color: var(--bs-light);
  padding: 0 3px;
  align-items: center;
  cursor: grab;
}
</style>
{{ end }}

{{ define "content" }}
<h1 class="fs-2 mb-3">{{ .Class.Name }} Fields</h1>
<form method="post" action="/admin/classes/{{ .Class.Slug }}/fields">
  <ul id="class-fields" class="list-unstyled d-grid gap-3 class-fields"><!-- No spaces so :empty triggers --></ul>
  <button type="submit" class="btn btn-primary">Submit</button>
</form>
{{ end }}

{{ define "sidebar" }}
<aside class="bg-dark text-secondary p-3">
  <ul id="field-types" class="list-unstyled d-grid gap-3"><!-- See FieldTypeBuilder for populating this --></ul>
</aside>
{{ end }}

{{ define "footer" }}
<div id="templates">
  <template id="field-type-template">
    <li class="d-grid" data-template="${template}" data-type="${type}" data-label="${label}"><button class="btn btn-secondary">${label}</button></li>
  </template>
  <template id="item-template">
    <div class="d-flex">
      <div class="d-flex sortable-handle">::</div>
      <div class="flex-grow-1 mx-3 field-definition">
        <h2 class="fs-5">${label}</h2>
        <input type="hidden" name="data[${id}][type]" value="${type}">
        <input type="hidden" name="fields[]" value="${id}">
      </div>
      <div class="d-flex align-items-start">
        <button type="button" class="btn btn-close" tabindex="-1" aria-label="Remove" data-target="item-${uuid}"></button>
      </div>
    </div>
  </template>
  <template id="common-template">
    <div class="row g-3">
      <div class="col-lg-6">
        <label for="${id}-label">Field Label</label>
        <input type="text" id="${id}-label" class="form-control mb-3" name="data[${id}][label]" value="" required>
      </div>
      <div class="col-lg-6">
        <label for="${id}-name">Field Name</label>
        <input type="text" id="${id}-name" class="form-control mb-3" name="data[${id}][name]" pattern="[a-z0-9_]+" title="Must be lowercase alphanumeric; underscores allowed" value="" required>
      </div>
    </div>
  </template>
  <template id="date-template">
    <div class="row g-3">
      <div class="col-lg-3">
        <label for="${id}-min">Min Date</label>
        <input type="date" id="${id}-min" class="form-control mb-3" name="data[${id}][min]" value="">
      </div>
      <div class="col-lg-3">
        <label for="${id}-max">Max Date</label>
        <input type="date" id="${id}-max" class="form-control mb-3" name="data[${id}][max]" value="">
      </div>
      <div class="col-lg-3">
        <label for="${id}-step">Step (seconds)</label>
        <input type="number" id="${id}-step" class="form-control mb-3" name="data[${id}][step]" min="0" value="">
      </div>
    </div>
  </template>
  <template id="time-template">
    <div class="row g-3">
      <div class="col-lg-3">
        <label for="${id}-min">Min Time</label>
        <input type="time" id="${id}-min" class="form-control mb-3" name="data[${id}][min]" value="">
      </div>
      <div class="col-lg-3">
        <label for="${id}-max">Max Time</label>
        <input type="time" id="${id}-max" class="form-control mb-3" name="data[${id}][max]" value="">
      </div>
      <div class="col-lg-3">
        <label for="${id}-step">Step (seconds)</label>
        <input type="number" id="${id}-step" class="form-control mb-3" name="data[${id}][step]" min="0" value="">
      </div>
    </div>
  </template>
  <template id="number-template">
    <div class="row g-3">
      <div class="col-lg-3">
        <label for="${id}-min">Min Number</label>
        <input type="number" id="${id}-min" class="form-control mb-3" name="data[${id}][min]" value="">
      </div>
      <div class="col-lg-3">
        <label for="${id}-max">Max Number</label>
        <input type="number" id="${id}-max" class="form-control mb-3" name="data[${id}][max]" value="">
      </div>
      <div class="col-lg-3">
        <label for="${id}-step">Step</label>
        <input type="number" id="${id}-step" class="form-control mb-3" name="data[${id}][step]" min="0" value="">
      </div>
    </div>
  </template>
  <template id="select-template">
    <div class="row g-3">
      <div class="col-lg-12">
        <label for="${id}-options">Options (one per line, key | value or just value)</label>
        <textarea id="${id}-options" class="form-control mb-3" name="data[${id}][options]" style="height: 10em;"></textarea>
      </div>
    </div>
  </template>
</div>
<script src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/uuid@latest/dist/umd/uuidv4.min.js"></script>
<script>
  const Replacer = (function(open, close) {
    'use strict';

    // Replaces all occurrences of keys wrapped in open and close tags with
    // values from replacements object
    const text = function(text, replacements) {
      for (const key in replacements) {
        const search = open + key + close;
        text = text.replaceAll(search, replacements[key]);
      }
      return text;
    };

    // Walks the node tree and replaces all tags within text nodes as well
    // as attributes
    const tree = function(node, replacements) {
      const walker = document.createTreeWalker(node, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_TEXT);
      for (let current = walker.currentNode; current != null; current = walker.nextNode()) {
        if (current.nodeType == Node.TEXT_NODE) {
          current.textContent = this.text(current.textContent, replacements);
        }
        if (current.nodeType == Node.ELEMENT_NODE && current.hasAttributes()) {
          for (let attr of current.attributes) {
            attr.value = this.text(attr.value, replacements);
          }
        }
      }
    };

    return {
      text: text,
      tree: tree,
    };
  })('${', '}');
</script>
<script>
  const FieldTypeBuilder = (function() {
    'use strict';

    const templateId = 'field-type-template';

    const buildNode = function(definition) {
      const template = document.getElementById(templateId);
      if (template == null) {
        console.error('Could not find template %s', templateId);
        return document.createElement('li');
      }

      const node = template.content.cloneNode(true);
      Replacer.tree(node, definition);
      return node;
    }

    // Generates nodes from definitions array.
    // Definitions array should contain objects with the keys:
    // * type
    // * template
    // * label
    const create = function(node, definitions) {
      for (let i = 0; i < definitions.length; i++) {
        const definition = definitions[i];
        node.appendChild(buildNode(definition));
      }
    };

    return {
      create: create,
    };
  })();
</script>
<script>
  const ClassFieldBuilder = (function() {
    'use strict';

    const suffix = '-template';

    const addField = function(node, data) {
      const item = document.getElementById('item' + suffix).content.cloneNode(true);
      const common = document.getElementById('common' + suffix).content.cloneNode(true);
      const template = document.getElementById(data.template + suffix);

      const definition = item.querySelector('.field-definition');
      definition.appendChild(common);
      if (template != null) {
        definition.appendChild(template.content.cloneNode(true));
      }

      Replacer.tree(item, data);

      node.setAttribute('id', 'item-' + data.uuid);
      item.querySelector('button.btn-close').addEventListener('click', function(event) {
        event.preventDefault();
        const item = document.getElementById(event.target.dataset.target);
        item.parentNode.removeChild(item);
      });

      for (const key in data.values) {
        const value = data.values[key];
        const name = 'data[' + data.id + '][' + key + ']';
        const selector = '[name="' + name + '"]';
        const node = item.querySelector(selector);
        if (node == null) {
          console.error('Could not find node with name %s', name);
          continue;
        }
        node.value = value;
      }

      node.replaceChildren(item);
    };

    const addHandler = function(event) {
      let data = newData();
      data.label = event.item.dataset.label;
      data.type = event.item.dataset.type;
      data.template = event.item.dataset.template;
      addField(event.item, data);
    };

    // parent: ul node
    // types:  fieldTypeDefinitions
    // fields: classFieldDefinitions
    const create = function(parent, types, fields) {
      for (let i = 0; i < fields.length; i++) {
        const field = fields[i];
        const type = searchType(field.type, types);
        if (type == null) {
          console.error('Unsupported type: %s', field.type);
          continue;
        }

        let data = newData();
        data.label = type.label;
        data.type = type.type;
        data.template = type.template;
        data.values = field;

        const item = document.createElement('li');
        parent.appendChild(item);

        addField(item, data);
      }
    };

    const newData = function() {
      const uuid = uuidv4();
      return {
        'uuid':     uuid,
        'id':       'field-' + uuid,
        'label':    null,
        'type':     null,
        'template': null,
        'values':   {},
      };
    }

    const searchType = function(needle, haystack) {
      for (let i = 0; i < haystack.length; i++) {
        const type = haystack[i];
        if (type.type == needle) {
          return type;
        }
      }
      return null;
    };

    return {
      create: create,
      addHandler: addHandler,
    };
  })();
</script>
<script>
  // This will probably come from the server
  const fieldTypeDefinitions = {{ .FieldTypes }};

  // This will rebuild the field list for editing purposes
  const classFieldDefinitions = {{ .Class.Fields }} || [];

  // Initialize field type buttons
  const fieldTypes = document.getElementById('field-types');
  FieldTypeBuilder.create(fieldTypes, fieldTypeDefinitions);

  // Initialize field type DnD
  const fieldTypesOptions = {
    group: {
      name: 'field-types',
      pull: 'clone',
    },
    sort: false, // Disable sorting as we only want to pull from this list
  };
  Sortable.create(fieldTypes, fieldTypesOptions);

  // Initialize any pre-built class fields
  const classFields = document.getElementById('class-fields');
  ClassFieldBuilder.create(classFields, fieldTypeDefinitions, classFieldDefinitions);

  // Initialize class field DnD
  const classFieldsOptions = {
    group: {
      name: 'class-fields',
      put: 'field-types',
    },
    animation: 150,
    emptyInsertThreshold: 20, // defaults to 5
    handle: '.sortable-handle',
    onAdd: ClassFieldBuilder.addHandler,
  };
  Sortable.create(classFields, classFieldsOptions);
</script>
{{ end }}
